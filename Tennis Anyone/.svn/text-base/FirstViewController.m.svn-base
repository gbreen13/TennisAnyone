//
//  FirstViewController.m
//  Tennis Anyone
//
//  Created by George Breen on 12/14/13.1
//  Copyright (c) 2013 George Breen. All rights reserved.
//

#import "FirstViewController.h"

@implementation FirstViewController

@synthesize topBar,scheduleTableView, ms, oldMatch, upcomingMatches;

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
    [[UINavigationBar appearance] setTitleTextAttributes: @{
                                                            UITextAttributeTextColor: [UIColor whiteColor],
                                                            UITextAttributeTextShadowColor: [UIColor clearColor],
                                                            UITextAttributeTextShadowOffset: [NSValue valueWithUIOffset:UIOffsetMake(0.0f, 1.0f)],
                                                            UITextAttributeFont: [UIFont fontWithName: DEFAULT_FONT size:24.0f]
                                                            }];
    scheduleTableView.layer.cornerRadius=5;
    scheduleTableView.autoresizingMask = UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleTopMargin;
    [self reloadFromSharedTaSchedule];
}
//
//  Adjust height of the table.  this sets properly whether ipad, iphone or 4" iphone
//


- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreate.
}

-(BOOL)shouldPerformSegueWithIdentifier:(NSString *) identifier sender:(id)sender
{
    NSIndexPath *indexPath = [self.scheduleTableView indexPathForSelectedRow];
    if([[upcomingMatches objectAtIndex:indexPath.row] isKindOfClass: [singleMatch class]])
    {
        return YES;
    }
    if([[upcomingMatches objectAtIndex:indexPath.row] isKindOfClass: [weeklySchedule class]])
    {
        return YES;
    }
    return NO;
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"MatchSettingsSegue"]) {
        ms = [segue destinationViewController];
        if([sender isKindOfClass:[upcomingMatchCell class]]) { // if we are transitiioning from the table, use that singleMatch to edit
            NSIndexPath *indexPath = [self.scheduleTableView indexPathForSelectedRow];
            oldMatch = ms.sm = [upcomingMatches objectAtIndex:indexPath.row];
        } else  {                                               // from the "new" button
            oldMatch = ms.sm = nil;
        }
        ms.delegate = self;
    }
}


-(IBAction) newSingleMatchSelected:(id)sender
{
     [self performSegueWithIdentifier:@"MatchSettingsSegue" sender:sender];
}

#pragma mark - matchSettings delegate
- (void)matchSettingsDidCancel: (matchSettings *)controller
{
    [self.navigationController popViewControllerAnimated:YES];
    
}

- (void)matchSettingsDidFinish:(singleMatch *)modifiedMatch andController: (matchSettings *) controller
{
    if(oldMatch != nil)
        [sharedTaSchedule replaceSingleMatch:oldMatch with:modifiedMatch];
    else
        [sharedTaSchedule addSingleMatch:modifiedMatch];
    
    [self reloadFromSharedTaSchedule];
    [scheduleTableView reloadData];
        
    [self.navigationController popViewControllerAnimated:YES];
}


#pragma mark - Table view data source

-(void) reloadFromSharedTaSchedule
{
    upcomingMatches = [sharedTaSchedule getNextMatchesFromDate:[[NSDate date]dateByAddingTimeInterval: -24*60*60] forCount:4];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    UITableViewCell *cell = [self.scheduleTableView cellForRowAtIndexPath:indexPath];
    [self performSegueWithIdentifier:@"MatchSettingsSegue" sender:cell];
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if([upcomingMatches count])
        return [upcomingMatches count];
    else
        return 1;
}

//
//  We can only delete upcoming matches that are sinigle matches from the first section.
//
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the specified item to be editable.
    if([upcomingMatches count] > indexPath.row) {
        if([[upcomingMatches objectAtIndex:indexPath.row] isKindOfClass: [singleMatch class]])
            return YES;
    }
    return NO;
}

- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        if([[upcomingMatches objectAtIndex:indexPath.row] isKindOfClass: [singleMatch class]]) {
            [sharedTaSchedule deleteSingleMatch:(singleMatch *)[upcomingMatches objectAtIndex:indexPath.row]];
           [self reloadFromSharedTaSchedule];
            [self.scheduleTableView reloadData];
            return;
        }
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if([upcomingMatches count]) {
        NSString *cellIdentifier = @"MatchCell";
        upcomingMatchCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
        if(cell == nil) {
            cell = [[upcomingMatchCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];
        }
        [cell setCellWithMatches:[upcomingMatches objectAtIndex:[indexPath row]]];
        return cell;
    } else {
        NSString *cellIdentifier = @"PromptCell";
        EmptyTablePromptCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
        if(cell == nil) {
            cell = [[EmptyTablePromptCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];
            [cell.prompt setText:@"Press to set up a Match"];
        }
        return cell;
    }
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if([upcomingMatches count] > 0)
        return MATCH_CELL_HEIGHT;
    else
        return PROMPT_CELL_HEIGHT;
    
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return 0.0f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return DEFAULT_TABLE_HEADER_HEIGHT;
}
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    UIView *sectionHeaderView;
    
    
    sectionHeaderView = [[UIView alloc] initWithFrame:
             CGRectMake(0, 0, tableView.bounds.size.width, DEFAULT_TABLE_HEADER_HEIGHT)];
    
    
    sectionHeaderView.backgroundColor = [UIColor colorWithRed:170.0/255.0 green:174.0/255.0 blue: 181.0/255.0 alpha:1.0];
    
    UILabel *headerLabel=  [[UILabel alloc] initWithFrame:
        CGRectMake(20, 0, sectionHeaderView.frame.size.width, DEFAULT_TABLE_HEADER_HEIGHT)];;
    
    
    headerLabel.backgroundColor = [UIColor clearColor];
    headerLabel.textAlignment = NSTextAlignmentLeft;
    headerLabel.text = @"UPCOMING MATCHES";
    [headerLabel setFont:[UIFont fontWithName:DEFAULT_FONT size:18.0]];
    headerLabel.textColor = [UIColor colorWithRed:54.0/255.0f green:82.0/255.0f blue:123.0/255.0f alpha:1.0f];
    [sectionHeaderView addSubview:headerLabel];
    
    headerLabel.text = @"UPCOMING MATCHES";
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeContactAdd];
    [button setFrame:CGRectMake(sectionHeaderView.frame.size.width-(DEFAULT_TABLE_HEADER_HEIGHT+5), 3.0, DEFAULT_TABLE_HEADER_HEIGHT-5, DEFAULT_TABLE_HEADER_HEIGHT-5)];
    button.tag = section;
    button.hidden = NO;
    [button setBackgroundColor:[UIColor clearColor]];
    [button setTintColor:[UIColor whiteColor]];
//    [button addTarget:self action:@selector(insertParameter:) forControlEvents:UIControlEventTouchDown];
    [sectionHeaderView addSubview:button];
    
    if(section == 0) {
        [button addTarget:self action:@selector(newSingleMatchSelected:) forControlEvents:UIControlEventTouchUpInside];
    }
    return sectionHeaderView;
}

@end
